#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.7.0 on Tue Mar 24 11:04:20 2015
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
import wx.html as wh #wh.HtmlWindow

#has javascript support, but does not work in debian
#import wx.html2 as wh2 #wh2.WebView
import wx.stc as wxstc
#default class: for this widget: wxListCtrl

#adapted from http://wiki.wxpython.org/ListControls#Drag_and_Drop_with_a_striped_drag_list
class DragListStriped(wx.ListCtrl):
    def __init__(self, *arg, **kw):
        wx.ListCtrl.__init__(self, *arg, **kw)

        #self.Bind(wx.EVT_LIST_BEGIN_DRAG, self._onDrag)
        #self.Bind(wx.EVT_LIST_END_DRAG, self._onEndDrag)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self._onSelect)
        self.Bind(wx.EVT_LEFT_UP,self._onMouseUp)
        self.Bind(wx.EVT_LEFT_DOWN, self._onMouseDown)
        self.Bind(wx.EVT_LEAVE_WINDOW, self._onLeaveWindow)
        self.Bind(wx.EVT_ENTER_WINDOW, self._onEnterWindow)
        self.Bind(wx.EVT_LIST_INSERT_ITEM, self._onInsert)
        self.Bind(wx.EVT_LIST_DELETE_ITEM, self._onDelete)

        #---------------
        # Variables
        #---------------
        self.IsInControl=True
        self.startIndex=-1
        self.dropIndex=-1
        self.IsDrag=False
        self.dragIndex=-1
        self.idx = 0
        #print 'QWERTY a '+str(self.idx); self.idx+=1

    def _onLeaveWindow(self, event):
        #print 'QWERTY b '+str(self.idx); self.idx+=1
        self.IsInControl=False
        self.IsDrag=False
        event.Skip()

    def _onEnterWindow(self, event):
        #print 'QWERTY c '+str(self.idx); self.idx+=1
        self.IsInControl=True
        event.Skip()

    def _onDrag(self, event):
        #print 'QWERTY d '+str(self.idx); self.idx+=1
        self.IsDrag=True
        self.dragIndex=event.m_itemIndex
        event.Skip()
        pass

    def _onSelect(self, event):
        #print 'QWERTY e '+str(self.idx); self.idx+=1
        self.startIndex=event.m_itemIndex
        event.Skip()

    def _onEndDrag(self, event):
        #print 'QWERTY F '+str(self.idx); self.idx+=1
        self.doEndDrag(event)
      
    def _onMouseUp(self, event):
        #print 'QWERTY f '+str(self.idx); self.idx+=1
        self.doEndDrag(event)
        
    def doEndDrag(self, event):
        # Purpose: to generate a dropIndex.
        # Process: check self.IsInControl, check self.IsDrag, HitTest, compare HitTest value
        # The mouse can end up in 5 different places:
        # Outside the Control
        # On itself
        # Above its starting point and on another item
        # Below its starting point and on another item
        # Below its starting point and not on another item
        #print 'Mira: IsInControl=%r, IsDrag=%r, startIndex=%d' % (self.IsInControl, self.IsDrag, self.startIndex)

        if self.IsInControl==False:       #1. Outside the control : Do Nothing
            self.IsDrag=False
        else:                                   # In control but not a drag event : Do Nothing
            if self.IsDrag==False:
                pass
            else:                               # In control and is a drag event : Determine Location
                self.hitIndex=self.HitTest(event.GetPosition())
                self.dropIndex=self.hitIndex[0]
                # -- Drop index indicates where the drop location is; what index number
                #---------
                # Determine dropIndex and its validity
                #--------
                if self.dropIndex==self.startIndex or self.dropIndex==-1:    #2. On itself or below control : Do Nothing
                    pass
                else:
                    #----------
                    # Now that dropIndex has been established do 3 things
                    # 1. gather item data
                    # 2. delete item in list
                    # 3. insert item & it's data into the list at the new index
                    #----------
                    dropList=[]         # Drop List is the list of field values from the list control
                    thisItem=self.GetItem(self.startIndex)
                    for x in range(self.GetColumnCount()):
                        dropList.append(self.GetItem(self.startIndex,x).GetText())
                    thisItem.SetId(self.dropIndex)
                    self.DeleteItem(self.startIndex)
                    self.InsertItem(thisItem)
                    for x in range(self.GetColumnCount()):
                        self.SetStringItem(self.dropIndex,x,dropList[x])
                    mn = min(self.dropIndex, self.startIndex)
                    mx = max(self.dropIndex, self.startIndex)
                    for i in xrange(mn, mx+1):
                        self.SetStringItem(i, 0, str(i))
            #------------
            # I don't know exactly why, but the mouse event MUST
            # call the stripe procedure if the control is to be successfully
            # striped. Every time it was only in the _onInsert, it failed on
            # dragging index 3 to the index 1 spot.
            #-------------
            # Furthermore, in the load button on the wxFrame that this lives in,
            # I had to call the _onStripe directly because it would occasionally fail
            # to stripe without it. You'll notice that this is present in the example stub.
            # Someone with more knowledge than I probably knows why...and how to fix it properly.
            #-------------
        self._onStripe()
        self.IsDrag=False
        event.Skip()

    def _onMouseDown(self, event):
        #print 'QWERTY g '+str(self.idx); self.idx+=1
        self.IsInControl=True
        
        hitidx = self.HitTest(event.GetPosition())
        if hitidx[0]!=-1:
          #print 'START DRAGGING: '+str(hitidx)
          self.IsDrag=True
          self.dragIndex=hitidx[0]#event.m_itemIndex
        event.Skip()

    def _onInsert(self, event):
        #print 'QWERTY h '+str(self.idx); self.idx+=1
        # Sequencing on a drop event is:
        # wx.EVT_LIST_ITEM_SELECTED
        # wx.EVT_LIST_BEGIN_DRAG
        # wx.EVT_LEFT_UP
        # wx.EVT_LIST_ITEM_SELECTED (at the new index)
        # wx.EVT_LIST_INSERT_ITEM
        #--------------------------------
        # this call to onStripe catches any addition to the list; drag or not
        self._onStripe()
        self.dragIndex=-1
        event.Skip()

    def _onDelete(self, event):
        #print 'QWERTY i '+str(self.idx); self.idx+=1
        self._onStripe()
        event.Skip()

    def _onStripe(self):
        #print 'QWERTY j '+str(self.idx); self.idx+=1
        if self.GetItemCount()>0:
            for x in range(self.GetItemCount()):
                if x % 2==0:
                    self.SetItemBackgroundColour(x,wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DLIGHT))
                else:
                    self.SetItemBackgroundColour(x,wx.WHITE)
# end wxGlade


class AllFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: AllFrame.__init__
        wx.Frame.__init__(self, *args, **kwds)
        self.alltabs = wx.Notebook(self, wx.ID_ANY)
        self.notebook_1_pane_1 = wx.Panel(self.alltabs, wx.ID_ANY)
        self.openfoldertxt = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.openfolderbut = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Open working directory..."))
        self.label_11 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, _("Input File Names:"))
        self.selectfilenamesbut = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Select file names..."))
        self.inputfilesctrl = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "", style=wx.TE_DONTWRAP | wx.TE_MULTILINE)
        self.processfilenamesbut = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Validate file names..."))
        self.filelistctrl = DragListStriped(self.notebook_1_pane_1, wx.ID_ANY, style=wx.LC_REPORT)
        self.usegridmode = wx.CheckBox(self.notebook_1_pane_1, wx.ID_ANY, _("use grid options"))
        self.gridcomplete = wx.CheckBox(self.notebook_1_pane_1, wx.ID_ANY, _("the grid is complete"))
        self.labelnrows = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, _("number of rows: "))
        self.nrows = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "")
        self.labelncols = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, _("number of columns: "))
        self.ncols = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "")
        self.fillmode = wx.RadioBox(self.notebook_1_pane_1, wx.ID_ANY, _("Fill mode (1):"), choices=[_("by row"), _("by column")], majorDimension=1, style=wx.RA_SPECIFY_COLS)
        self.gridmode = wx.RadioBox(self.notebook_1_pane_1, wx.ID_ANY, _("Fill mode (2):"), choices=[_("snake"), _("grid")], majorDimension=1, style=wx.RA_SPECIFY_COLS)
        self.registerorder = wx.RadioBox(self.notebook_1_pane_1, wx.ID_ANY, _("Register mode:"), choices=[_("diagonal (zig-zag)"), _("acquisition order (grid)")], majorDimension=1, style=wx.RA_SPECIFY_COLS)
        self.sizer_24_staticbox = wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, _("Grid layout options (if the images have been acquired in a grid):"))
        self.notebook_1_pane_2 = wx.Panel(self.alltabs, wx.ID_ANY)
        self.label_3 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, _("Z scale factor (pixel intensity):"))
        self.zctrl = wx.TextCtrl(self.notebook_1_pane_2, wx.ID_ANY, _("1.0"))
        self.label_4 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, _("Pixel step:"))
        self.stepctrl = wx.TextCtrl(self.notebook_1_pane_2, wx.ID_ANY, _("1.0"))
        self.rebasebymedian = wx.CheckBox(self.notebook_1_pane_2, wx.ID_ANY, _("Rebase by median"))
        self.sizer_34_staticbox = wx.StaticBox(self.notebook_1_pane_2, wx.ID_ANY, _("Scaling"))
        self.rotationmode = wx.RadioBox(self.notebook_1_pane_2, wx.ID_ANY, _("Rotation mode:"), choices=[_("No rotation"), _("Rotate only first image"), _("Rotate all images by the first image"), _("Rotate all images independently")], majorDimension=1, style=wx.RA_SPECIFY_COLS)
        self.rotationalgo = wx.RadioBox(self.notebook_1_pane_2, wx.ID_ANY, _("Rotation algorithm"), choices=[_("Fit regression plane computed by SVD"), _("Fit plane computed by RANSAC")], majorDimension=1, style=wx.RA_SPECIFY_COLS)
        self.labelransac1 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, _("  Number of iterations of the RANSAC algorithm:  "))
        self.ransacfpk = wx.TextCtrl(self.notebook_1_pane_2, wx.ID_ANY, _("200"))
        self.labelransac2 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, _("maximum distance (in pixel steps):  "))
        self.ransacfpt = wx.TextCtrl(self.notebook_1_pane_2, wx.ID_ANY, _("4.0"))
        self.labelransac3 = wx.StaticText(self.notebook_1_pane_2, wx.ID_ANY, _("Minimum ratio of points:  "))
        self.ransacfpr = wx.TextCtrl(self.notebook_1_pane_2, wx.ID_ANY, _("0.6"))
        self.sizerRotRANSACParamsLabel_staticbox = wx.StaticBox(self.notebook_1_pane_2, wx.ID_ANY, _("Parameters to fit a plane by RANSAC"))
        self.sizerRotParamLabel_staticbox = wx.StaticBox(self.notebook_1_pane_2, wx.ID_ANY, _("Rotation Parameters"))
        self.sizer_9_staticbox = wx.StaticBox(self.notebook_1_pane_2, wx.ID_ANY, _("Plane Rotation Options"))
        self.notebook_1_pane_3 = wx.Panel(self.alltabs, wx.ID_ANY)
        self.enablepc = wx.CheckBox(self.notebook_1_pane_3, wx.ID_ANY, _("Enable Phase Correlation"))
        self.whiteningpc = wx.CheckBox(self.notebook_1_pane_3, wx.ID_ANY, _("Enable pre-whitening"))
        self.subpixelpc = wx.CheckBox(self.notebook_1_pane_3, wx.ID_ANY, _("Enable subpixel precision"))
        self.labelpc1 = wx.StaticText(self.notebook_1_pane_3, wx.ID_ANY, _("Subpixel scale factor: "), style=wx.ALIGN_RIGHT)
        self.subpixelfacpc = wx.TextCtrl(self.notebook_1_pane_3, wx.ID_ANY, _("100.0"))
        self.labelpc2 = wx.StaticText(self.notebook_1_pane_3, wx.ID_ANY, _("Correlation Coefficient Threshold: "))
        self.corrcoefpc = wx.TextCtrl(self.notebook_1_pane_3, wx.ID_ANY, _("0.8"))
        self.labelpc4 = wx.StaticText(self.notebook_1_pane_3, wx.ID_ANY, _("Minimum overlap ratio: "))
        self.minratiopc = wx.TextCtrl(self.notebook_1_pane_3, wx.ID_ANY, _("0.01"))
        self.labelpc3 = wx.StaticText(self.notebook_1_pane_3, wx.ID_ANY, _("Sequence of numbers of peaks to analyze:"))
        self.numpeakspc = wx.TextCtrl(self.notebook_1_pane_3, wx.ID_ANY, _("100, 1000, 10000"))
        self.sizer_21_staticbox = wx.StaticBox(self.notebook_1_pane_3, wx.ID_ANY, _("Parameters for the Phase Correlation algorithm"))
        self.label_9 = wx.StaticText(self.notebook_1_pane_3, wx.ID_ANY, _("Keypoint matching threshold:  "))
        self.matchthr = wx.TextCtrl(self.notebook_1_pane_3, wx.ID_ANY, _("0.7"))
        self.label_9_copy = wx.StaticText(self.notebook_1_pane_3, wx.ID_ANY, _("  Number of iterations of the RANSAC algorithm:  "))
        self.ransacrtk = wx.TextCtrl(self.notebook_1_pane_3, wx.ID_ANY, _("1000"))
        self.label_9_copy_1 = wx.StaticText(self.notebook_1_pane_3, wx.ID_ANY, _("maximum distance (in pixel steps):  "))
        self.ransacrtt = wx.TextCtrl(self.notebook_1_pane_3, wx.ID_ANY, _("5.0"))
        self.label_9_copy_2 = wx.StaticText(self.notebook_1_pane_3, wx.ID_ANY, _("Minimum ratio of matched keypoints:  "))
        self.ransacrtr = wx.TextCtrl(self.notebook_1_pane_3, wx.ID_ANY, _("0.25"))
        self.sizer_22_staticbox = wx.StaticBox(self.notebook_1_pane_3, wx.ID_ANY, _("Parameters for the RANSAC rotation algorithm"))
        self.sizer_26_staticbox = wx.StaticBox(self.notebook_1_pane_3, wx.ID_ANY, _("Parameters for algorithms of the first phase of the registration"))
        self.label_10 = wx.StaticText(self.notebook_1_pane_3, wx.ID_ANY, _("Number of iterations: "))
        self.icpiters = wx.TextCtrl(self.notebook_1_pane_3, wx.ID_ANY, _("1000"))
        self.sizer_36_staticbox = wx.StaticBox(self.notebook_1_pane_3, wx.ID_ANY, _("Parameters for the ICP algorithm (second phase of the registration)"))
        self.notebook_1_pane_4 = wx.Panel(self.alltabs, wx.ID_ANY)
        self.freeformparams = wxstc.StyledTextCtrl(self.notebook_1_pane_4, wx.ID_ANY, style=wx.TE_MULTILINE & wx.TE_DONTWRAP)
        self.notebook_1_pane_5 = wx.Panel(self.alltabs, wx.ID_ANY)
        self.logctrl = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "", style=wx.HSCROLL | wx.TE_DONTWRAP | wx.TE_MULTILINE | wx.TE_READONLY)
        self.clearlog = wx.Button(self.notebook_1_pane_5, wx.ID_ANY, _("Clear log window"))
        self.notebook_1_pane_6 = wx.Panel(self.alltabs, wx.ID_ANY)
        self.visupanel = wx.Panel(self.notebook_1_pane_6, wx.ID_ANY)
        self.rectanglelabels = wx.CheckBox(self.notebook_1_pane_6, wx.ID_ANY, _("Enable rectangle labels"))
        self.alltabs_pane_1 = wx.Panel(self.alltabs, wx.ID_ANY)
        self.outputscript = wxstc.StyledTextCtrl(self.alltabs_pane_1, wx.ID_ANY, style=wx.TE_MULTILINE & wx.TE_DONTWRAP)
        self.computeOutputButton = wx.Button(self.alltabs_pane_1, wx.ID_ANY, _("Compute output"))
        self.alltabs_pane_3 = wx.Panel(self.alltabs, wx.ID_ANY)
        self.htmlw = wh.HtmlWindow(self.alltabs_pane_3, wx.ID_ANY)
        self.static_line_1 = wx.StaticLine(self, wx.ID_ANY, style=wx.EXPAND)
        self.computeButton = wx.Button(self, wx.ID_ANY, _("Start registration"))
        self.abortButton = wx.Button(self, wx.ID_ANY, _("Abort registration"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT_ENTER, self.changeOpenDir, self.openfoldertxt)
        self.Bind(wx.EVT_BUTTON, self.doOpenFolderBut, self.openfolderbut)
        self.Bind(wx.EVT_BUTTON, self.doSelectFiles, self.selectfilenamesbut)
        self.Bind(wx.EVT_BUTTON, self.doProcessFileNames, self.processfilenamesbut)
        self.Bind(wx.EVT_CHECKBOX, self.switchOptions, self.usegridmode)
        self.Bind(wx.EVT_RADIOBOX, self.switchOptions, self.rotationmode)
        self.Bind(wx.EVT_RADIOBOX, self.switchOptions, self.rotationalgo)
        self.Bind(wx.EVT_CHECKBOX, self.switchOptions, self.enablepc)
        self.Bind(wx.EVT_CHECKBOX, self.switchOptions, self.subpixelpc)
        self.Bind(wx.EVT_BUTTON, self.doClearLog, self.clearlog)
        self.Bind(wx.EVT_CHECKBOX, self.showRectangles, self.rectanglelabels)
        self.Bind(wx.EVT_BUTTON, self.doOutput, self.computeOutputButton)
        self.Bind(wx.EVT_BUTTON, self.doCompute, self.computeButton)
        self.Bind(wx.EVT_BUTTON, self.doAbort, self.abortButton)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: AllFrame.__set_properties
        self.SetTitle(_("Registration Configuration"))
        self.openfoldertxt.SetMinSize((500, -1))
        self.openfoldertxt.SetToolTip(wx.ToolTip(_("Set the working directory, were all axuliary files will be generated")))
        self.inputfilesctrl.SetMinSize((290, 200))
        self.inputfilesctrl.SetToolTip(wx.ToolTip(_("This can be filled either manually\nor using the \"Select file names\" button")))
        self.processfilenamesbut.SetToolTip(wx.ToolTip(_("If the files were entered manually, validate that they exist before starting the registration")))
        self.filelistctrl.SetMinSize((290, 200))
        self.usegridmode.SetToolTip(wx.ToolTip(_("If enabled, the images are assumed to have been acquired in a grid (allows for more robustregistration if some overlaps are too low).\nOtherwise, the only assumption is that each image overlaps with the precedent one")))
        self.gridcomplete.SetToolTip(wx.ToolTip(_("If not enabled, the grid is assumed to be incomplete")))
        self.gridcomplete.SetValue(1)
        self.labelnrows.SetToolTip(wx.ToolTip(_("number of rows in the grid")))
        self.nrows.SetToolTip(wx.ToolTip(_("number of rows in the grid")))
        self.labelncols.SetToolTip(wx.ToolTip(_("number of columns in the grid")))
        self.ncols.SetToolTip(wx.ToolTip(_("number of columns in the grid")))
        self.fillmode.SetToolTip(wx.ToolTip(_("the images were acquired either row by row or column by column")))
        self.fillmode.SetSelection(0)
        self.gridmode.SetToolTip(wx.ToolTip(_("The rows (columns) where acquired either in a snake-like way  or in a regular grid (see help)")))
        self.gridmode.SetSelection(0)
        self.registerorder.SetToolTip(wx.ToolTip(_("The order in which the application does the registration:\neither zig-zag (recommended to minimize errors)\nor in acquisition order")))
        self.registerorder.SetSelection(0)
        self.label_3.SetToolTip(wx.ToolTip(_("This paramter is not needed for PLU files.\nFor PNG and TIF files, it represents the scaling\nof the Z values (pixel intensities) relative to the pixel step")))
        self.zctrl.SetToolTip(wx.ToolTip(_("This paramter is not needed for PLU files.\nFor PNG and TIF files, it represents the scaling\nof the Z values (pixel intensities) relative to the pixel step")))
        self.label_4.SetToolTip(wx.ToolTip(_("for image files, PLU files already provide the pixel step")))
        self.stepctrl.SetToolTip(wx.ToolTip(_("for image files, PLU files already provide the pixel step")))
        self.rebasebymedian.SetToolTip(wx.ToolTip(_("Rebase Z values by substracting the median (after rotation, if any)")))
        self.rotationmode.SetToolTip(wx.ToolTip(_("Options:\nNo rotation / Rotate only 1st image: recommended only if Phase Correlation is not used\nRotate all by 1st: best mode if the first image is reasonably planar\nAll independent: very slow, not recommended")))
        self.rotationmode.SetSelection(2)
        self.rotationalgo.SetToolTip(wx.ToolTip(_("Regression plane: fast\nRANSAC plane: slow")))
        self.rotationalgo.SetSelection(1)
        self.labelransac2.SetToolTip(wx.ToolTip(_("if the distance from a point to the estimated plane is lower than this threshold, the point is considered to belong to the plane.\nThis parameter has to be adjusted to the roughness of the plane in the image")))
        self.ransacfpt.SetToolTip(wx.ToolTip(_("if the distance from a point to the estimated plane is lower than this threshold, the point is considered to belong to the plane.\nThis parameter has to be adjusted to the roughness of the plane in the image")))
        self.labelransac3.SetToolTip(wx.ToolTip(_("At least this ratio of points (relative to the total number of pixels in the image) has to be within the maximum distance to the plane (parameter above) to consider that the fitting is successful")))
        self.ransacfpr.SetToolTip(wx.ToolTip(_("At least this ratio of points (relative to the total number of pixels in the image) has to be within the maximum distance to the plane (parameter above) to consider that the fitting is successful")))
        self.enablepc.SetToolTip(wx.ToolTip(_("If enabled, Phase Correlation will be used.\nThis is the best algorithm, but it ABSOLUTELY requires the images to be orthogonal\n(no rotations during acquisition)")))
        self.enablepc.SetValue(1)
        self.whiteningpc.SetToolTip(wx.ToolTip(_("In some images, pre-whitening may be required for phase correlation to operate properly")))
        self.subpixelpc.SetToolTip(wx.ToolTip(_("Enable subpixel precision in phase correlation.\nOnly meaningful for high-quility images")))
        self.subpixelpc.SetValue(1)
        self.labelpc1.SetToolTip(wx.ToolTip(_("If subpixel precision is used, this is the upsampling scale")))
        self.subpixelfacpc.SetToolTip(wx.ToolTip(_("If subpixel precision is used, this is the upsampling scale")))
        self.labelpc2.SetToolTip(wx.ToolTip(_("Threshold to consider that a correlation coefficient is valid")))
        self.corrcoefpc.SetToolTip(wx.ToolTip(_("Threshold to consider that a correlation coefficient is valid")))
        self.labelpc4.SetToolTip(wx.ToolTip(_("Minimum ratio of overlap between images to consider that a correlation is valid")))
        self.minratiopc.SetToolTip(wx.ToolTip(_("Minimum ratio of overlap between images to consider that a correlation is valid")))
        self.labelpc3.SetToolTip(wx.ToolTip(_("Sequence of numbers of peaks to process. See the help.")))
        self.numpeakspc.SetMinSize((250, -1))
        self.numpeakspc.SetToolTip(wx.ToolTip(_("Sequence of numbers of peaks to process. See the help.")))
        self.logctrl.SetMinSize((900, -1))
        self.notebook_1_pane_5.SetToolTip(wx.ToolTip(_("Introduce here arbitrary python one-line statements to modify the configuration")))
        self.rectanglelabels.SetValue(1)
        self.abortButton.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: AllFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_23 = wx.BoxSizer(wx.VERTICAL)
        sizervisu = wx.BoxSizer(wx.VERTICAL)
        sizer_20 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_19 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_36_staticbox.Lower()
        sizer_36 = wx.StaticBoxSizer(self.sizer_36_staticbox, wx.HORIZONTAL)
        sizer_39 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_26_staticbox.Lower()
        sizer_26 = wx.StaticBoxSizer(self.sizer_26_staticbox, wx.VERTICAL)
        sizer_27 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_38 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_22_staticbox.Lower()
        sizer_22 = wx.StaticBoxSizer(self.sizer_22_staticbox, wx.VERTICAL)
        grid_sizer_3 = wx.FlexGridSizer(4, 2, 0, 0)
        sizer_30 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_21_staticbox.Lower()
        sizer_21 = wx.StaticBoxSizer(self.sizer_21_staticbox, wx.VERTICAL)
        sizer_35 = wx.BoxSizer(wx.VERTICAL)
        sizer_25 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(3, 2, 0, 0)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_33 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_9_staticbox.Lower()
        sizer_9 = wx.StaticBoxSizer(self.sizer_9_staticbox, wx.HORIZONTAL)
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        self.sizerRotParamLabel_staticbox.Lower()
        sizerRotParamLabel = wx.StaticBoxSizer(self.sizerRotParamLabel_staticbox, wx.VERTICAL)
        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizerRotRANSACParamsLabel_staticbox.Lower()
        sizerRotRANSACParamsLabel = wx.StaticBoxSizer(self.sizerRotRANSACParamsLabel_staticbox, wx.VERTICAL)
        grid_sizer_2 = wx.FlexGridSizer(3, 2, 0, 0)
        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_32 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_34_staticbox.Lower()
        sizer_34 = wx.StaticBoxSizer(self.sizer_34_staticbox, wx.HORIZONTAL)
        sizer_34_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_32_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_24_staticbox.Lower()
        sizer_24 = wx.StaticBoxSizer(self.sizer_24_staticbox, wx.HORIZONTAL)
        grid_sizer_4 = wx.FlexGridSizer(2, 2, 0, 0)
        sizer_28 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(self.openfoldertxt, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)
        sizer_3.Add(self.openfolderbut, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)
        sizer_2.Add(sizer_3, 0, wx.EXPAND, 0)
        sizer_11.Add(self.label_11, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_11.Add((5, 5), 1, wx.EXPAND, 0)
        sizer_11.Add(self.selectfilenamesbut, 0, wx.ALIGN_CENTER | wx.ALL, 3)
        sizer_6.Add(sizer_11, 1, wx.EXPAND, 0)
        sizer_6.Add(self.inputfilesctrl, 0, wx.EXPAND, 0)
        sizer_6.Add(self.processfilenamesbut, 0, wx.ALIGN_CENTER | wx.ALL, 3)
        sizer_4.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_4.Add(self.filelistctrl, 1, wx.ALL | wx.EXPAND, 5)
        sizer_2.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_28.Add(self.usegridmode, 0, wx.BOTTOM | wx.LEFT | wx.TOP, 3)
        sizer_28.Add(self.gridcomplete, 0, wx.BOTTOM | wx.LEFT | wx.TOP, 3)
        sizer_24.Add(sizer_28, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.TOP, 5)
        sizer_24.Add((25, 20), 0, 0, 0)
        grid_sizer_4.Add(self.labelnrows, 0, wx.ALIGN_RIGHT, 0)
        grid_sizer_4.Add(self.nrows, 0, wx.BOTTOM | wx.LEFT, 5)
        grid_sizer_4.Add(self.labelncols, 0, wx.ALIGN_RIGHT, 0)
        grid_sizer_4.Add(self.ncols, 0, wx.BOTTOM | wx.LEFT, 5)
        sizer_24.Add(grid_sizer_4, 0, wx.BOTTOM | wx.LEFT | wx.TOP, 5)
        sizer_24.Add((1, 1), 1, wx.EXPAND, 0)
        sizer_24.Add(self.fillmode, 0, wx.BOTTOM | wx.LEFT | wx.TOP, 5)
        sizer_24.Add((1, 1), 1, wx.EXPAND, 0)
        sizer_24.Add(self.gridmode, 0, wx.BOTTOM | wx.LEFT | wx.TOP, 5)
        sizer_24.Add((1, 1), 1, wx.EXPAND, 0)
        sizer_24.Add(self.registerorder, 0, wx.ALL, 5)
        sizer_2.Add(sizer_24, 1, wx.ALL | wx.EXPAND, 5)
        self.notebook_1_pane_1.SetSizer(sizer_2)
        sizer_10.Add((20, 10), 0, 0, 0)
        sizer_32.Add((10, 20), 0, 0, 0)
        sizer_34.Add((20, 20), 0, 0, 0)
        sizer_34_copy.Add((20, 5), 0, 0, 0)
        sizer_32_copy.Add((20, 20), 0, 0, 0)
        sizer_32_copy.Add(self.label_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_32_copy.Add((5, 20), 0, 0, 0)
        sizer_32_copy.Add(self.zctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_32_copy.Add((20, 20), 0, 0, 0)
        sizer_32_copy.Add(self.label_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_32_copy.Add((5, 20), 0, 0, 0)
        sizer_32_copy.Add(self.stepctrl, 0, wx.ALIGN_CENTER_VERTICAL, 1)
        sizer_32_copy.Add((20, 20), 0, 0, 0)
        sizer_32_copy.Add(self.rebasebymedian, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_32_copy.Add((20, 20), 2, wx.EXPAND, 0)
        sizer_34_copy.Add(sizer_32_copy, 1, wx.EXPAND, 0)
        sizer_34_copy.Add((20, 5), 0, 0, 0)
        sizer_34.Add(sizer_34_copy, 1, wx.EXPAND, 0)
        sizer_32.Add(sizer_34, 1, wx.EXPAND, 0)
        sizer_32.Add((10, 20), 0, 0, 0)
        sizer_10.Add(sizer_32, 1, wx.EXPAND, 0)
        sizer_10.Add((20, 10), 0, 0, 0)
        sizer_33.Add((10, 20), 0, 0, 0)
        sizer_12.Add(self.rotationmode, 0, wx.EXPAND, 0)
        sizer_9.Add(sizer_12, 2, wx.ALL | wx.EXPAND, 5)
        sizer_17.Add(self.rotationalgo, 0, wx.ALL | wx.EXPAND, 5)
        sizer_16.Add(sizer_17, 1, wx.EXPAND, 0)
        sizerRotParamLabel.Add(sizer_16, 0, wx.EXPAND, 0)
        grid_sizer_2.Add(self.labelransac1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_2.Add(self.ransacfpk, 0, wx.ALL, 3)
        grid_sizer_2.Add(self.labelransac2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_2.Add(self.ransacfpt, 0, wx.ALL, 3)
        grid_sizer_2.Add(self.labelransac3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_2.Add(self.ransacfpr, 0, wx.ALL, 3)
        sizerRotRANSACParamsLabel.Add(grid_sizer_2, 1, 0, 0)
        sizer_18.Add(sizerRotRANSACParamsLabel, 1, wx.EXPAND, 0)
        sizerRotParamLabel.Add(sizer_18, 0, wx.ALL | wx.EXPAND, 5)
        sizer_14.Add(sizerRotParamLabel, 3, wx.EXPAND, 0)
        sizer_9.Add(sizer_14, 3, wx.BOTTOM | wx.EXPAND | wx.RIGHT | wx.TOP, 5)
        sizer_33.Add(sizer_9, 4, wx.EXPAND, 0)
        sizer_33.Add((10, 20), 0, 0, 0)
        sizer_10.Add(sizer_33, 4, wx.EXPAND, 0)
        sizer_10.Add((20, 20), 0, wx.EXPAND, 0)
        self.notebook_1_pane_2.SetSizer(sizer_10)
        sizer_19.Add((20, 10), 0, 0, 0)
        sizer_26.Add((20, 10), 0, 0, 0)
        sizer_35.Add(self.enablepc, 0, wx.ALL, 3)
        sizer_35.Add(self.whiteningpc, 0, wx.ALL, 3)
        sizer_35.Add(self.subpixelpc, 0, wx.ALL, 3)
        grid_sizer_1.Add(self.labelpc1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.subpixelfacpc, 0, wx.ALIGN_CENTER | wx.ALL, 3)
        grid_sizer_1.Add(self.labelpc2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.corrcoefpc, 0, wx.ALIGN_CENTER | wx.ALL, 3)
        grid_sizer_1.Add(self.labelpc4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.minratiopc, 0, wx.ALIGN_CENTER | wx.ALL, 3)
        sizer_25.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_35.Add(sizer_25, 1, wx.EXPAND, 0)
        sizer_35.Add(self.labelpc3, 0, 0, 0)
        sizer_35.Add(self.numpeakspc, 0, wx.ALIGN_RIGHT | wx.ALL, 3)
        sizer_21.Add(sizer_35, 1, wx.ALL | wx.EXPAND, 10)
        sizer_30.Add(sizer_21, 1, wx.EXPAND, 0)
        sizer_27.Add(sizer_30, 0, wx.ALL | wx.EXPAND, 5)
        grid_sizer_3.Add(self.label_9, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_3.Add(self.matchthr, 0, wx.ALL, 3)
        grid_sizer_3.Add(self.label_9_copy, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_3.Add(self.ransacrtk, 0, wx.ALL, 3)
        grid_sizer_3.Add(self.label_9_copy_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_3.Add(self.ransacrtt, 0, wx.ALL, 3)
        grid_sizer_3.Add(self.label_9_copy_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_3.Add(self.ransacrtr, 0, wx.ALL, 3)
        sizer_22.Add(grid_sizer_3, 1, wx.ALL | wx.EXPAND, 5)
        sizer_38.Add(sizer_22, 1, wx.EXPAND, 0)
        sizer_27.Add(sizer_38, 0, wx.BOTTOM | wx.EXPAND | wx.RIGHT | wx.TOP, 5)
        sizer_26.Add(sizer_27, 1, wx.EXPAND, 0)
        sizer_19.Add(sizer_26, 4, wx.ALL | wx.EXPAND, 10)
        sizer_39.Add(self.label_10, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        sizer_39.Add(self.icpiters, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_36.Add(sizer_39, 1, wx.ALL | wx.EXPAND, 5)
        sizer_19.Add(sizer_36, 1, wx.ALL | wx.EXPAND, 10)
        sizer_19.Add((20, 20), 0, 0, 0)
        self.notebook_1_pane_3.SetSizer(sizer_19)
        sizer_8.Add(self.freeformparams, 1, wx.EXPAND, 0)
        self.notebook_1_pane_4.SetSizer(sizer_8)
        sizer_5.Add(self.logctrl, 1, wx.EXPAND, 0)
        sizer_5.Add(self.clearlog, 0, wx.ALIGN_CENTER | wx.ALL, 3)
        self.notebook_1_pane_5.SetSizer(sizer_5)
        sizervisu.Add(self.visupanel, 1, wx.EXPAND, 0)
        sizer_20.Add(self.rectanglelabels, 0, 0, 0)
        sizervisu.Add(sizer_20, 0, 0, 0)
        self.notebook_1_pane_6.SetSizer(sizervisu)
        sizer_23.Add(self.outputscript, 1, wx.EXPAND, 0)
        sizer_23.Add(self.computeOutputButton, 0, wx.ALIGN_CENTER | wx.ALL, 3)
        self.alltabs_pane_1.SetSizer(sizer_23)
        sizer_15.Add(self.htmlw, 1, wx.EXPAND, 0)
        self.alltabs_pane_3.SetSizer(sizer_15)
        self.alltabs.AddPage(self.notebook_1_pane_1, _("Files"))
        self.alltabs.AddPage(self.notebook_1_pane_2, _("Preparation"))
        self.alltabs.AddPage(self.notebook_1_pane_3, _("Registration"))
        self.alltabs.AddPage(self.notebook_1_pane_4, _("Freeform parameters"))
        self.alltabs.AddPage(self.notebook_1_pane_5, _("Log"))
        self.alltabs.AddPage(self.notebook_1_pane_6, _("Visualization"))
        self.alltabs.AddPage(self.alltabs_pane_1, _("Output"))
        self.alltabs.AddPage(self.alltabs_pane_3, _("Help"))
        sizer_1.Add(self.alltabs, 1, wx.EXPAND, 0)
        sizer_1.Add(self.static_line_1, 0, 0, 0)
        sizer_13.Add(self.computeButton, 0, wx.ALL, 5)
        sizer_13.Add(self.abortButton, 0, wx.ALL, 5)
        sizer_1.Add(sizer_13, 0, wx.ALIGN_CENTER, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def changeOpenDir(self, event):  # wxGlade: AllFrame.<event_handler>
        print "Event handler 'changeOpenDir' not implemented!"
        event.Skip()

    def doOpenFolderBut(self, event):  # wxGlade: AllFrame.<event_handler>
        print "Event handler 'doOpenFolderBut' not implemented!"
        event.Skip()

    def doSelectFiles(self, event):  # wxGlade: AllFrame.<event_handler>
        print "Event handler 'doSelectFiles' not implemented!"
        event.Skip()

    def doProcessFileNames(self, event):  # wxGlade: AllFrame.<event_handler>
        print "Event handler 'doProcessFileNames' not implemented!"
        event.Skip()

    def switchOptions(self, event):  # wxGlade: AllFrame.<event_handler>
        print "Event handler 'switchOptions' not implemented!"
        event.Skip()

    def doClearLog(self, event):  # wxGlade: AllFrame.<event_handler>
        print "Event handler 'doClearLog' not implemented!"
        event.Skip()

    def showRectangles(self, event):  # wxGlade: AllFrame.<event_handler>
        print "Event handler 'showRectangles' not implemented!"
        event.Skip()

    def doOutput(self, event):  # wxGlade: AllFrame.<event_handler>
        print "Event handler 'doOutput' not implemented!"
        event.Skip()

    def doCompute(self, event):  # wxGlade: AllFrame.<event_handler>
        print "Event handler 'doCompute' not implemented!"
        event.Skip()

    def doAbort(self, event):  # wxGlade: AllFrame.<event_handler>
        print "Event handler 'doAbort' not implemented!"
        event.Skip()

# end of class AllFrame
